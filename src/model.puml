@startuml "SensRNet-UML-Model"

package owner <<Rectangle>> {
    together {
        class Owner {
            id: SensRNet.OwnerId
            organisationName: String
            website: URL
        }

        class ContactDetails {
            name: String
            email: String
            phone: String
        }

        Owner *- ContactDetails : contactPerson
        Owner *- ContactDetails : publicContactDetails
    }

    class User {
        id: SensRNet.UserId
        socialId: String
        username: String
        email: String
        // rights connected to role
        role: String
    }

    note right
        <size:10>Owners are the 'real' objects</size>
        <size:10>but will be represented by</size>
        <size:10>users. Users will connect</size>
        <size:10>with a social account</size>
        <size:10>(e.g. Google, Azure, </size>
        <size:10>Facebook)</size>
    end note

    Owner o-- "*" User : users
}

package sensor <<Rectangle>> {
    class Sensor {
        id: SensRNet.SensorId
        name: String
        aim: String
        description: String
        manufacturer: String
        // whole sensor or per dataStream?
        // don't know: one physical package can haven more components, generating different dataStream
        // for exmaple: Aireas Airbox can provide (ambiant) temperature and humidity, PPM fine dust particals, Ozone, NOx, COx....
        // use recursive partent -child sensor relation?
        // or physical case with 1:1 Location and 1:N Sensors?
        active: Boolean 
        observationArea: GML
        // or only on dataStream?
        documentation: URL
        .. variants are in seperate lists/enums ..
        theme: List<Themes>
        quality: List<Qualitygrades>
        type: Type
        // per type details
        typeDetails: jsonObject
    }

    interface Type

    note left
        Category can be derived from
        specific type
    end note

    enum Category {
        SENSOR,
        CAMERA,
        BEACON
    }

    enum Themes {
        Weather,
        NatureAndEnvironment,
        Waste,
        Safety,
        Mobility,
        SoilAndUnderground,
        Other
    }

    // Added quality grade
    enum Qualitygrades {
        Professional
        // f.e. RIVM luchtmeetstations
        Intermediate
        // f.e. Aireas airboxes
        Basic
        // f.e. Intemo josine
        Personal
        // f.e. cell/mobile phone thingies
    }
    
    enum TypeSensor {
        WeatherStation,
        WindGauge,
        WasteContainers,
        FineDustSensor,
        UVSensor,
        LightCell,
        MotionSensor,
        FireDetector,
        WaterLevelMeter,
        MicrophoneOrSoundMeter,
        PedometerCounters,
        RadarDetector,
        GMSSensor,
        DetectionLoop,
        HeightDetectionDevice
    }

    enum TypeCamera {
        EnvironmentalZoneCameras,
        SecurityCamera,
        TraphicFlashlight,
    }

    enum TypeBeacon {
        NavigationBeacon
    }

    class Location {
        x: Float
        y: Float
        z: Float
        epsgCode: Int
        // reference to external Id
        // e.g. IMGEO+ objectId
        baseObjectId: String
    }

    class DataStream {
        id: SensRNet.DataStreamId
        name: String
        reason: String
        description: String
        // physicalElement
        observedProperty: String
        unitOfMeasurement: String
        isPublic: Boolean
        isOpenData: Boolean
        isReusable: Boolean
        documentation: URL
        dataLink: URL
        // in seconds
        dataFrequency: Int
        // 0.0 - 1.0
        dataQuality: Float
    }

    Sensor "1" *- "1" Location : location
    Sensor "1" *- "*" DataStream : dataStreams
    Sensor "1" *- "1" Qualitygrades : Qualifiction

    Sensor "1" o-- "*" Themes
    Sensor "1" o-- "1" Type
    Type <-- TypeSensor
    Type <-- TypeBeacon
    Type <-- TypeCamera
}

Owner "1" *-- "*" Sensor : has

@enduml
